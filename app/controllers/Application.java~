package controllers;
import java.io.File;
import java.io.FileInputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.util.Iterator;

import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;

import com.avaje.ebean.Ebean;

import play.Routes;
import play.mvc.*;
import play.data.*;
import static play.data.Form.*;
import views.html.*;
import models.*;



//import org.apache.poi.hssf.usermodel.HSSFWorkbook;
/**
 * Manage a database of computers
 */



public class Application extends Controller {
    
    /**
     * This result directly redirect to application home.
     */
    public static Result GO_HOME = redirect(
        routes.Application.list(0, "name", "asc", "")
    );
    
    /**
     * Handle default path requests, redirect to computers list
     */
    

    
    public static class Login {
    	String usuario;
    	String password;
    	public String validate() {
    	    if (Usuario.autenticar(usuario, password) == null) {
    	      return "Invalid user or password";
    	    }
    	    return null;
    	}    	
    }
    
    
    public static Result login(){
    	session().clear();
    	return ok(login.render(form(Login.class)));
    } 

    public static Result logout(){
    	session().clear();
    	return ok(login.render(form(Login.class)));
    }     
    
    public static Result autentica() {
    	session().clear();		
    	DynamicForm requestData = form().bindFromRequest();	
		String usuario = requestData.get("usuario");
		String password = requestData.get("password");
		Usuario u = Usuario.autenticar(usuario, password); 
		if ( u == null){				
			return ok( "" );
		} else {
	        session("nombre", u.personal.nombreCompleto());
	        String roles = "";
	        String cvesRoles="";
	        for (UsuarioRol ur : u.personal.usuario.roles){
	        	roles+=ur.rol.descripcion  +" ";
	        	cvesRoles+=ur.rol.id+" ";
	        }
	        if (cvesRoles.contains("1 ")){	        	
	        	session("idAdmin", u.personal.id.toString());
	        }
	        
	        if (cvesRoles.contains("2 ")){
	        	Evaluador e = Evaluador.find.where().eq("personal.id", u.id).findUnique();
	        	session("idEvaluador", e.id.toString());
	        }
	        	
	        session("roles",roles);
	        session("cvesRoles",cvesRoles);
	        
	        
System.out.println("*******************************");
System.out.println("****"+u.personal.nombre.toString()+" "+u.personal.paterno.toString()+" "+u.personal.materno.toString()+"****");
System.out.println("****"+cvesRoles+"****");
System.out.println("****"+session("idAdmin")+"****");
System.out.println("****"+session("idEvaluador")+"****");
System.out.println("*******************************");

			return ok(session("cvesRoles"));		
		}
            
        
    }    
    
    /**
     * Display the paginated list of computers.
     *
     * @param page Current page number (starts from 0)
     * @param sortBy Column to be sorted
     * @param order Sort order (either asc or desc)
     * @param filter Filter applied on computer names
     */
    

    public static Result list(int page, String sortBy, String order, String filter) {
        return ok(
            list.render(
                Computer.page(page, 10, sortBy, order, filter),
                sortBy, order, filter
            )
        );
    }
    
    /**
     * Display the 'edit form' of a existing Computer.
     *
     * @param id Id of the computer to edit
     */
    public static Result edit(Long id) {
        Form<Computer> computerForm = form(Computer.class).fill(
            Computer.find.byId(id)
        );
        return ok(
            editForm.render(id, computerForm)
        );
    }
    
    /**
     * Handle the 'edit form' submission 
     *
     * @param id Id of the computer to edit
     */
    public static Result update(Long id) {
        Form<Computer> computerForm = form(Computer.class).bindFromRequest();
        if(computerForm.hasErrors()) {
            return badRequest(editForm.render(id, computerForm));
        }
        computerForm.get().update(id);
        flash("success", "Computer " + computerForm.get().name + " has been updated");
        return GO_HOME;
    }
    
    /**
     * Display the 'new computer form'.
     */
    public static Result create() {
        Form<Computer> computerForm = form(Computer.class);
        return ok(
            createForm.render(computerForm)
        );
    }
    
    /**
     * Handle the 'new computer form' submission 
     */
    public static Result save() {
        Form<Computer> computerForm = form(Computer.class).bindFromRequest();
        if(computerForm.hasErrors()) {
            return badRequest(createForm.render(computerForm));
        }
        computerForm.get().save();
        flash("success", "Computer " + computerForm.get().name + " has been created");
        return GO_HOME;
    }
    
    /**
     * Handle computer deletion
     */
    public static Result delete(Long id) {
        Computer.find.ref(id).delete();
        flash("success", "Computer has been deleted");
        return GO_HOME;
    }
    
    public static Result ajaxIndex() {
      	return ok("ajax!!!!");
      }
 

    
    public static Result stopServer() {
    	try{
System.out.println("Intentando apagado...");    		
	        Socket s = new Socket(InetAddress.getByName("localhost"), 8080);
	        OutputStream out = s.getOutputStream();
	        System.out.println("*** sending jetty stop request");
	        out.write(("\r\n").getBytes());
	        out.flush();
	        s.close();
System.out.println("Apagado.");	        
			return ok("server apagado");    	
    	} catch (Exception e){
System.out.println("Error en el apagado.");    		
    		return ok("Error: "+e.getMessage());
    	}
    }
    

    public static Result javascriptRoutes() {
        response().setContentType("text/javascript");
        return ok(Routes.javascriptRouter("jsRoutes",
		            controllers.routes.javascript.Application.list(),
		            controllers.routes.javascript.UnidadacademicaController.list2(),
		            controllers.routes.javascript.UnidadacademicaController.edit(),
		            controllers.routes.javascript.EvaluacionEvaluadorController.solicitarProrroga()
        		)
            );
    }    
/*
    public static Result javascriptRoutes() {
        response().setContentType("text/javascript");
        return ok(
            Routes.javascriptRouter("myJsRoutes",
                routes.javascript.Application.getItem(),
                routes.javascript.Application.newItem(),
                routes.javascript.Application.updateItem(),
                //inside somepackage
                controllers.somepackage.routes.javascript.Application.updateItem()
            )
        );
    }    
*/    
    
    
    
    public static Result cambiarPassword(){
    	DynamicForm requestData = form().bindFromRequest();
System.out.println(requestData);    	
		String password = requestData.get("passActual");
		String passwordNuevo = requestData.get("claveAcceso");
		Usuario u = null;
		// Es administrador?
		if( play.mvc.Controller.session().get("cvesRoles").contains("1 ")){
System.out.println("1");			
System.out.println("password "+  password);
System.out.println("passwordNuevo "+  passwordNuevo);
System.out.println("session().get('idAdmin') "+session().get("idAdmin"));
			Personal p = Personal.elAdministrador();
System.out.println("p "+p.nombreCompleto());
			u = Usuario.autenticar(   Usuario.find.where().eq("personal.id", p.id).findUnique().usuario  , password); 		
		}
		//Es evaluador?
		if(session().get("cvesRoles").contains("2 ")){
System.out.println("2");
			Evaluador e = Evaluador.find.byId( Long.parseLong(session().get("idEvaluador"))  );
			Personal p =  e.personal;
			
			u = Usuario.autenticar( p.usuario.usuario, password);			
		}		
System.out.println("u "+u); 
		if ( u == null){			
			return ok( "error:La clave de acceso actual no es correcta." );
		} else {
			
			u.password = passwordNuevo;
			u.update();
			
			
			return ok("Cambio correcto");
		}
    }
    
    public static Result leerXL(){
    	
    	try
    	{
    		
    		
    	
            FileInputStream file = new FileInputStream(new File("/home/epuente/criteriosxl2013.xlsx"));
 
            //Create Workbook instance holding reference to .xlsx file
        //    HSSFWorkbook workbook = new HSSFWorkbook(file);
            XSSFWorkbook workbook = new HSSFWorkbook(file);
            
            //Get first/desired sheet from the workbook
            HSSFSheet sheet = workbook.getSheetAt(0);
 
            //Iterate through each rows one by one
            Iterator<Row> rowIterator = sheet.iterator();
            while (rowIterator.hasNext()) 
            {
                Row row = rowIterator.next();
                	                
                if (row.getRowNum() >= 2){
System.out.println("Renglon: "+row.getRowNum() +" de "+sheet.getLastRowNum());                	
		                //For each row, iterate through all the columns
		                Iterator<Cell> cellIterator = row.cellIterator();
		        		EvaluacionTabla2 evt2 = new EvaluacionTabla2();	                
		                while (cellIterator.hasNext()) 
		                {
		                    Cell cell = cellIterator.next();
		                    //Check the cell type and format accordingly
		                    int nversion = Ebean.createSqlQuery("SELECT VersionActual() retorno").findUnique().getInteger("retorno");
		                    evt2.version = EvaluacionTablaVersion.find.where().eq("version",  nversion).findUnique();
		                     
//System.out.println("  columna "+cell.getColumnIndex());		                    
		                    
		                    //Num reactivo
		                    if (cell.getColumnIndex() == 0){
		                    	evt2.numreactivo = (long) cell.getNumericCellValue();
		                    }
		                    // Reactivo
		                    if (cell.getColumnIndex() == 1){
		                    	evt2.reactivo = cell.getStringCellValue();		                    
		                    }
		                    //Aspecto
		                    if (cell.getColumnIndex() == 3){
		                    	if (cell.getStringCellValue().contains("1")){
		                    		evt2.aspecto = Aspecto.find.byId(1L);
		                    	}
		                    	if (cell.getStringCellValue().contains("2")){
		                    		evt2.aspecto = Aspecto.find.byId(2L);
		                    	}
		                    	if (cell.getStringCellValue().contains("3")){
		                    		evt2.aspecto = Aspecto.find.byId(3L);
		                    	}
		                    	if (cell.getStringCellValue().contains("4")){
		                    		evt2.aspecto = Aspecto.find.byId(4L);
		                    	}
		                    }
		                    
		                    
		                    
		                    if (cell.getColumnIndex() == 4){                  	
		                    	if (cell.getStringCellValue().contains("X")){
		                    		EvaluacionTabla2 evtC4 = new EvaluacionTabla2();
		                    		evtC4.version = evt2.version;
		                    		evtC4.numreactivo = evt2.numreactivo;
		                    		evtC4.reactivo = evt2.reactivo;
		                    		evtC4.aspecto = evt2.aspecto;
//		                    		System.out.print("      "+    cell.getStringCellValue()+"  "+cell.getStringCellValue().contains("X"));	
////		                    		System.out.println("");
		                    		evtC4.criterio1 = ClasificadorCriterio1.find.byId(1L);
		                    		evtC4.criterio2 = ClasificadorCriterio2.find.byId(1L);
		                    		evtC4.criterio3 = ClasificadorCriterio3.find.byId(2L);
		                    		evtC4.save();		                    		
		                    	}
		                    	
		                    }

		                    if (cell.getColumnIndex() == 5){             	
		                    	if (cell.getStringCellValue().contains("X")){
		                    		EvaluacionTabla2 evtC5 = new EvaluacionTabla2();
		                    		evtC5.version = evt2.version;
		                    		evtC5.numreactivo = evt2.numreactivo;
		                    		evtC5.reactivo = evt2.reactivo;
		                    		evtC5.aspecto = evt2.aspecto;	
////		                    		System.out.print("      "+  cell.getStringCellValue()+"  "+cell.getStringCellValue().contains("X"));	
////		                    		System.out.println("");
		                    		evtC5.criterio1 = ClasificadorCriterio1.find.byId(1L);
		                    		evtC5.criterio2 = ClasificadorCriterio2.find.byId(1L);
		                    		evtC5.criterio3 = ClasificadorCriterio3.find.byId(1L);
		                    		evtC5.save();		                    		
		                    	}		                    	
		                    }
		                    if (cell.getColumnIndex() == 6){             	
		                    	if (cell.getStringCellValue().contains("X")){
		                    		EvaluacionTabla2 evtC5 = new EvaluacionTabla2();
		                    		evtC5.version = evt2.version;
		                    		evtC5.numreactivo = evt2.numreactivo;
		                    		evtC5.reactivo = evt2.reactivo;
		                    		evtC5.aspecto = evt2.aspecto;	
//		                    		System.out.print("      "+  cell.getStringCellValue()+"  "+cell.getStringCellValue().contains("X"));	
//		                    		System.out.println("");
		                    		evtC5.criterio1 = ClasificadorCriterio1.find.byId(1L);
		                    		evtC5.criterio2 = ClasificadorCriterio2.find.byId(2L);
		                    		evtC5.criterio3 = ClasificadorCriterio3.find.byId(3L);
		                    		evtC5.save();		                    		
		                    	}		                    	
		                    }			                    
		                    if (cell.getColumnIndex() == 7){             	
		                    	if (cell.getStringCellValue().contains("X")){
		                    		EvaluacionTabla2 evtC5 = new EvaluacionTabla2();
		                    		evtC5.version = evt2.version;
		                    		evtC5.numreactivo = evt2.numreactivo;
		                    		evtC5.reactivo = evt2.reactivo;
		                    		evtC5.aspecto = evt2.aspecto;	
//		                    		System.out.print("      "+  cell.getStringCellValue()+"  "+cell.getStringCellValue().contains("X"));	
//		                    		System.out.println("");
		                    		evtC5.criterio1 = ClasificadorCriterio1.find.byId(1L);
		                    		evtC5.criterio2 = ClasificadorCriterio2.find.byId(2L);
		                    		evtC5.criterio3 = ClasificadorCriterio3.find.byId(2L);
		                    		evtC5.save();		                    		
		                    	}		                    	
		                    }	
		                    if (cell.getColumnIndex() == 8){             	
		                    	if (cell.getStringCellValue().contains("X")){
		                    		EvaluacionTabla2 evtC5 = new EvaluacionTabla2();
		                    		evtC5.version = evt2.version;
		                    		evtC5.numreactivo = evt2.numreactivo;
		                    		evtC5.reactivo = evt2.reactivo;
		                    		evtC5.aspecto = evt2.aspecto;	
//		                    		System.out.print("      "+  cell.getStringCellValue()+"  "+cell.getStringCellValue().contains("X"));	
//		                    		System.out.println("");
		                    		evtC5.criterio1 = ClasificadorCriterio1.find.byId(1L);
		                    		evtC5.criterio2 = ClasificadorCriterio2.find.byId(2L);
		                    		evtC5.criterio3 = ClasificadorCriterio3.find.byId(1L);
		                    		evtC5.save();		                    		
		                    	}		                    	
		                    }
		                    if (cell.getColumnIndex() == 9){             	
		                    	if (cell.getStringCellValue().contains("X")){
		                    		EvaluacionTabla2 evtC5 = new EvaluacionTabla2();
		                    		evtC5.version = evt2.version;
		                    		evtC5.numreactivo = evt2.numreactivo;
		                    		evtC5.reactivo = evt2.reactivo;
		                    		evtC5.aspecto = evt2.aspecto;	
//		                    		System.out.print("      "+  cell.getStringCellValue()+"  "+cell.getStringCellValue().contains("X"));	
//		                    		System.out.println("");
		                    		evtC5.criterio1 = ClasificadorCriterio1.find.byId(1L);
		                    		evtC5.criterio2 = ClasificadorCriterio2.find.byId(3L);
		                    		evtC5.criterio3 = ClasificadorCriterio3.find.byId(4L);
		                    		evtC5.save();		                    		
		                    	}		                    	
		                    }		                    
		                    if (cell.getColumnIndex() == 10){             	
		                    	if (cell.getStringCellValue().contains("X")){
		                    		EvaluacionTabla2 evtC5 = new EvaluacionTabla2();
		                    		evtC5.version = evt2.version;
		                    		evtC5.numreactivo = evt2.numreactivo;
		                    		evtC5.reactivo = evt2.reactivo;
		                    		evtC5.aspecto = evt2.aspecto;	
//		                    		System.out.print("      "+  cell.getStringCellValue()+"  "+cell.getStringCellValue().contains("X"));	
//		                    		System.out.println("");
		                    		evtC5.criterio1 = ClasificadorCriterio1.find.byId(1L);
		                    		evtC5.criterio2 = ClasificadorCriterio2.find.byId(3L);
		                    		evtC5.criterio3 = ClasificadorCriterio3.find.byId(3L);
		                    		evtC5.save();		                    		
		                    	}		                    	
		                    }		                    
		                    if (cell.getColumnIndex() == 11){             	
		                    	if (cell.getStringCellValue().contains("X")){
		                    		EvaluacionTabla2 evtC5 = new EvaluacionTabla2();
		                    		evtC5.version = evt2.version;
		                    		evtC5.numreactivo = evt2.numreactivo;
		                    		evtC5.reactivo = evt2.reactivo;
		                    		evtC5.aspecto = evt2.aspecto;	
//		                    		System.out.print("      "+  cell.getStringCellValue()+"  "+cell.getStringCellValue().contains("X"));	
//		                    		System.out.println("");
		                    		evtC5.criterio1 = ClasificadorCriterio1.find.byId(1L);
		                    		evtC5.criterio2 = ClasificadorCriterio2.find.byId(3L);
		                    		evtC5.criterio3 = ClasificadorCriterio3.find.byId(2L);
		                    		evtC5.save();		                    		
		                    	}		                    	
		                    }		                    
		                    if (cell.getColumnIndex() == 12){             	
		                    	if (cell.getStringCellValue().contains("X")){
		                    		EvaluacionTabla2 evtC5 = new EvaluacionTabla2();
		                    		evtC5.version = evt2.version;
		                    		evtC5.numreactivo = evt2.numreactivo;
		                    		evtC5.reactivo = evt2.reactivo;
		                    		evtC5.aspecto = evt2.aspecto;	
//		                    		System.out.print("      "+  cell.getStringCellValue()+"  "+cell.getStringCellValue().contains("X"));	
//		                    		System.out.println("");
		                    		evtC5.criterio1 = ClasificadorCriterio1.find.byId(1L);
		                    		evtC5.criterio2 = ClasificadorCriterio2.find.byId(3L);
		                    		evtC5.criterio3 = ClasificadorCriterio3.find.byId(1L);
		                    		evtC5.save();		                    		
		                    	}		                    	
		                    }
		                    
		                    if (cell.getColumnIndex() == 13){             	
		                    	if (cell.getStringCellValue().contains("X")){
		                    		EvaluacionTabla2 evtC5 = new EvaluacionTabla2();
		                    		evtC5.version = evt2.version;
		                    		evtC5.numreactivo = evt2.numreactivo;
		                    		evtC5.reactivo = evt2.reactivo;
		                    		evtC5.aspecto = evt2.aspecto;	
//		                    		System.out.print("      "+  cell.getStringCellValue()+"  "+cell.getStringCellValue().contains("X"));	
//		                    		System.out.println("");
		                    		evtC5.criterio1 = ClasificadorCriterio1.find.byId(2L);
		                    		evtC5.criterio2 = ClasificadorCriterio2.find.byId(4L);
		                    		evtC5.criterio3 = ClasificadorCriterio3.find.byId(6L);
		                    		evtC5.save();		                    		
		                    	}		                    	
		                    }
		                    if (cell.getColumnIndex() == 14){             	
		                    	if (cell.getStringCellValue().contains("X")){
		                    		EvaluacionTabla2 evtC5 = new EvaluacionTabla2();
		                    		evtC5.version = evt2.version;
		                    		evtC5.numreactivo = evt2.numreactivo;
		                    		evtC5.reactivo = evt2.reactivo;
		                    		evtC5.aspecto = evt2.aspecto;	
//		                    		System.out.print("      "+  cell.getStringCellValue()+"  "+cell.getStringCellValue().contains("X"));	
//		                    		System.out.println("");
		                    		evtC5.criterio1 = ClasificadorCriterio1.find.byId(2L);
		                    		evtC5.criterio2 = ClasificadorCriterio2.find.byId(4L);
		                    		evtC5.criterio3 = ClasificadorCriterio3.find.byId(5L);
		                    		evtC5.save();		                    		
		                    	}		                    	
		                    }		                    
		                    if (cell.getColumnIndex() == 15){             	
		                    	if (cell.getStringCellValue().contains("X")){
		                    		EvaluacionTabla2 evtC5 = new EvaluacionTabla2();
		                    		evtC5.version = evt2.version;
		                    		evtC5.numreactivo = evt2.numreactivo;
		                    		evtC5.reactivo = evt2.reactivo;
		                    		evtC5.aspecto = evt2.aspecto;	
//		                    		System.out.print("      "+  cell.getStringCellValue()+"  "+cell.getStringCellValue().contains("X"));	
//		                    		System.out.println("");
		                    		evtC5.criterio1 = ClasificadorCriterio1.find.byId(2L);
		                    		evtC5.criterio2 = ClasificadorCriterio2.find.byId(5L);
		                    		evtC5.criterio3 = ClasificadorCriterio3.find.byId(6L);
		                    		evtC5.save();		                    		
		                    	}		                    	
		                    }		                    
		                    if (cell.getColumnIndex() == 16){             	
		                    	if (cell.getStringCellValue().contains("X")){
		                    		EvaluacionTabla2 evtC5 = new EvaluacionTabla2();
		                    		evtC5.version = evt2.version;
		                    		evtC5.numreactivo = evt2.numreactivo;
		                    		evtC5.reactivo = evt2.reactivo;
		                    		evtC5.aspecto = evt2.aspecto;	
//		                    		System.out.print("      "+  cell.getStringCellValue()+"  "+cell.getStringCellValue().contains("X"));	
//		                    		System.out.println("");
		                    		evtC5.criterio1 = ClasificadorCriterio1.find.byId(2L);
		                    		evtC5.criterio2 = ClasificadorCriterio2.find.byId(5L);
		                    		evtC5.criterio3 = ClasificadorCriterio3.find.byId(5L);
		                    		evtC5.save();		                    		
		                    	}		                    	
		                    }		                    
		                    if (cell.getColumnIndex() == 17){             	
		                    	if (cell.getStringCellValue().contains("X")){
		                    		EvaluacionTabla2 evtC5 = new EvaluacionTabla2();
		                    		evtC5.version = evt2.version;
		                    		evtC5.numreactivo = evt2.numreactivo;
		                    		evtC5.reactivo = evt2.reactivo;
		                    		evtC5.aspecto = evt2.aspecto;	
//		                    		System.out.print("      "+  cell.getStringCellValue()+"  "+cell.getStringCellValue().contains("X"));	
//		                    		System.out.println("");
		                    		evtC5.criterio1 = ClasificadorCriterio1.find.byId(2L);
		                    		evtC5.criterio2 = ClasificadorCriterio2.find.byId(6L);
		                    		evtC5.criterio3 = ClasificadorCriterio3.find.byId(6L);
		                    		evtC5.save();		                    		
		                    	}		                    	
		                    }		                    
		                    if (cell.getColumnIndex() == 18){             	
		                    	if (cell.getStringCellValue().contains("X")){
		                    		EvaluacionTabla2 evtC5 = new EvaluacionTabla2();
		                    		evtC5.version = evt2.version;
		                    		evtC5.numreactivo = evt2.numreactivo;
		                    		evtC5.reactivo = evt2.reactivo;
		                    		evtC5.aspecto = evt2.aspecto;	
//		                    		System.out.print("      "+  cell.getStringCellValue()+"  "+cell.getStringCellValue().contains("X"));	
//		                    		System.out.println("");
		                    		evtC5.criterio1 = ClasificadorCriterio1.find.byId(2L);
		                    		evtC5.criterio2 = ClasificadorCriterio2.find.byId(6L);
		                    		evtC5.criterio3 = ClasificadorCriterio3.find.byId(5L);
		                    		evtC5.save();		                    		
		                    	}		                    	
		                    }		                    
		                    
		                    
		                    
/*
                    		if(evt2.aspecto!=null &&  evt2.criterio1 != null && evt2.criterio2 != null && evt2.criterio3 != null){
	                    		evt2.save();
	                    		evt2 = new EvaluacionTabla2();
                    		}		                    
*/		                    
		                /*    
		                    switch (cell.getCellType()) 
		                    {
		                        case Cell.CELL_TYPE_NUMERIC:
		                            System.out.print(cell.getNumericCellValue() + "t");
		                            break;
		                        case Cell.CELL_TYPE_STRING:
		                            System.out.print(cell.getStringCellValue() + "t");
		                            break;
		                    }
		                    */
		                    
		                }
//		                System.out.println("fin de renglon");
            	}
               
            }
            file.close();
            System.out.println("fin de lectura");;
        } 
        catch (Exception e) 
        {
            e.printStackTrace();
        }
		return ok ("yap");    	
    }

    
}
            
